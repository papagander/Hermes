// <auto-generated />
using System;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(ReportContext))]
    partial class ReportContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("Domain.Models.DataCore.Conjoiner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Conjoiners");
                });

            modelBuilder.Entity("Domain.Models.DataCore.FieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FieldTypes");
                });

            modelBuilder.Entity("Domain.Models.DataCore.FieldTypeOperator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperatorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("OperatorId", "FieldTypeId")
                        .HasName("FieldTypeOperator");

                    b.HasIndex("FieldTypeId");

                    b.ToTable("FieldTypeOperators");
                });

            modelBuilder.Entity("Domain.Models.DataCore.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("Domain.Models.DataSets.DataSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DataSets");
                });

            modelBuilder.Entity("Domain.Models.DataSets.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataSetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("QueryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DataSetId");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("QueryId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("Domain.Models.Queries.Conjunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConjoinerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConjoinerId");

                    b.HasIndex("StatementId");

                    b.ToTable("Conjunctions");
                });

            modelBuilder.Entity("Domain.Models.Queries.Criterion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("StatementId");

                    b.ToTable("Criteria");
                });

            modelBuilder.Entity("Domain.Models.Queries.CriterionValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CriterionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CriterionId");

                    b.ToTable("CriterionValues");
                });

            modelBuilder.Entity("Domain.Models.Queries.Query", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataSetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StatementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DataSetId");

                    b.HasIndex("StatementId");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("Domain.Models.Queries.QueryField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QueryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("QueryId");

                    b.ToTable("QueryFields");
                });

            modelBuilder.Entity("Domain.Models.Queries.Statement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConjunctionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConjunctionId");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("Domain.Models.DataCore.FieldTypeOperator", b =>
                {
                    b.HasOne("Domain.Models.DataCore.FieldType", "FieldType")
                        .WithMany("FieldTypeOperators")
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.DataCore.Operator", "Operator")
                        .WithMany("FieldTypeOperators")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldType");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("Domain.Models.DataSets.Field", b =>
                {
                    b.HasOne("Domain.Models.DataSets.DataSet", "DataSet")
                        .WithMany("Fields")
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.DataCore.FieldType", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Queries.Query", null)
                        .WithMany("Fields")
                        .HasForeignKey("QueryId");

                    b.Navigation("DataSet");

                    b.Navigation("FieldType");
                });

            modelBuilder.Entity("Domain.Models.Queries.Conjunction", b =>
                {
                    b.HasOne("Domain.Models.DataCore.Conjoiner", "Conjoiner")
                        .WithMany()
                        .HasForeignKey("ConjoinerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Queries.Statement", "Statement")
                        .WithMany("Conjunctions")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conjoiner");

                    b.Navigation("Statement");
                });

            modelBuilder.Entity("Domain.Models.Queries.Criterion", b =>
                {
                    b.HasOne("Domain.Models.DataSets.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.DataCore.Operator", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Queries.Statement", "Statement")
                        .WithMany("Criterions")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Operator");

                    b.Navigation("Statement");
                });

            modelBuilder.Entity("Domain.Models.Queries.CriterionValue", b =>
                {
                    b.HasOne("Domain.Models.Queries.Criterion", "Criterion")
                        .WithMany("CriterionValues")
                        .HasForeignKey("CriterionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criterion");
                });

            modelBuilder.Entity("Domain.Models.Queries.Query", b =>
                {
                    b.HasOne("Domain.Models.DataSets.DataSet", "DataSet")
                        .WithMany()
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Queries.Statement", "Statement")
                        .WithMany()
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSet");

                    b.Navigation("Statement");
                });

            modelBuilder.Entity("Domain.Models.Queries.QueryField", b =>
                {
                    b.HasOne("Domain.Models.DataSets.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Queries.Query", "Query")
                        .WithMany()
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Query");
                });

            modelBuilder.Entity("Domain.Models.Queries.Statement", b =>
                {
                    b.HasOne("Domain.Models.Queries.Conjunction", "Conjunction")
                        .WithMany("Statements")
                        .HasForeignKey("ConjunctionId");

                    b.Navigation("Conjunction");
                });

            modelBuilder.Entity("Domain.Models.DataCore.FieldType", b =>
                {
                    b.Navigation("FieldTypeOperators");
                });

            modelBuilder.Entity("Domain.Models.DataCore.Operator", b =>
                {
                    b.Navigation("FieldTypeOperators");
                });

            modelBuilder.Entity("Domain.Models.DataSets.DataSet", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Domain.Models.Queries.Conjunction", b =>
                {
                    b.Navigation("Statements");
                });

            modelBuilder.Entity("Domain.Models.Queries.Criterion", b =>
                {
                    b.Navigation("CriterionValues");
                });

            modelBuilder.Entity("Domain.Models.Queries.Query", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Domain.Models.Queries.Statement", b =>
                {
                    b.Navigation("Conjunctions");

                    b.Navigation("Criterions");
                });
#pragma warning restore 612, 618
        }
    }
}
