// <auto-generated />
using System;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(ReportContext))]
    partial class ReportContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.DataCore.Conjoiner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Conjoiner");
                });

            modelBuilder.Entity("Domain.Models.DataCore.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ExecutionString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Operator");
                });

            modelBuilder.Entity("Domain.Models.DataCore.OperatorFieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DbType")
                        .HasColumnType("int");

                    b.Property<int>("OperatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("OperatorId");

                    b.ToTable("OperatorFieldType");
                });

            modelBuilder.Entity("Domain.Models.DataCore.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DbType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("OperatorId");

                    b.ToTable("Parameter");
                });

            modelBuilder.Entity("Domain.Models.FieldSets.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DbType")
                        .HasColumnType("int");

                    b.Property<int>("FieldSetId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FieldSetId");

                    b.HasIndex("Id");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("Domain.Models.FieldSets.FieldSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("FieldSet");
                });

            modelBuilder.Entity("Domain.Models.Queries.Conjunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConjoinerId")
                        .HasColumnType("int");

                    b.Property<int>("StatementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConjoinerId");

                    b.HasIndex("Id");

                    b.HasIndex("StatementId");

                    b.ToTable("Conjunction");
                });

            modelBuilder.Entity("Domain.Models.Queries.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<int>("OperatorId")
                        .HasColumnType("int");

                    b.Property<int>("StatementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("Id");

                    b.HasIndex("OperatorId");

                    b.HasIndex("StatementId");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("Domain.Models.Queries.OperationParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int>("ParameterId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("ParameterId");

                    b.ToTable("OperationParameter");
                });

            modelBuilder.Entity("Domain.Models.Queries.Query", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FieldSetId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("StatementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldSetId");

                    b.HasIndex("Id");

                    b.HasIndex("StatementId");

                    b.ToTable("Query");
                });

            modelBuilder.Entity("Domain.Models.Queries.Statement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ParentConjunctionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentConjunctionId");

                    b.ToTable("Statement");
                });

            modelBuilder.Entity("FieldQuery", b =>
                {
                    b.Property<int>("FieldsId")
                        .HasColumnType("int");

                    b.Property<int>("QueriesId")
                        .HasColumnType("int");

                    b.HasKey("FieldsId", "QueriesId");

                    b.HasIndex("QueriesId");

                    b.ToTable("FieldQuery");
                });

            modelBuilder.Entity("Domain.Models.DataCore.OperatorFieldType", b =>
                {
                    b.HasOne("Domain.Models.DataCore.Operator", "Operator")
                        .WithMany("OperatorFieldTypes")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("Domain.Models.DataCore.Parameter", b =>
                {
                    b.HasOne("Domain.Models.DataCore.Operator", "Operator")
                        .WithMany("Parameters")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("Domain.Models.FieldSets.Field", b =>
                {
                    b.HasOne("Domain.Models.FieldSets.FieldSet", "FieldSet")
                        .WithMany("Fields")
                        .HasForeignKey("FieldSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldSet");
                });

            modelBuilder.Entity("Domain.Models.Queries.Conjunction", b =>
                {
                    b.HasOne("Domain.Models.DataCore.Conjoiner", "Conjoiner")
                        .WithMany()
                        .HasForeignKey("ConjoinerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Queries.Statement", "Statement")
                        .WithMany("conjunctions")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conjoiner");

                    b.Navigation("Statement");
                });

            modelBuilder.Entity("Domain.Models.Queries.Operation", b =>
                {
                    b.HasOne("Domain.Models.FieldSets.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.DataCore.Operator", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Queries.Statement", "Statement")
                        .WithMany("operations")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Operator");

                    b.Navigation("Statement");
                });

            modelBuilder.Entity("Domain.Models.Queries.OperationParameter", b =>
                {
                    b.HasOne("Domain.Models.Queries.Operation", "Operation")
                        .WithMany("OperationParameters")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Models.DataCore.Parameter", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Domain.Models.Queries.Query", b =>
                {
                    b.HasOne("Domain.Models.FieldSets.FieldSet", "FieldSet")
                        .WithMany("Queries")
                        .HasForeignKey("FieldSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Queries.Statement", "Statement")
                        .WithMany()
                        .HasForeignKey("StatementId");

                    b.Navigation("FieldSet");

                    b.Navigation("Statement");
                });

            modelBuilder.Entity("Domain.Models.Queries.Statement", b =>
                {
                    b.HasOne("Domain.Models.Queries.Conjunction", "ParentConjunction")
                        .WithMany("Statements")
                        .HasForeignKey("ParentConjunctionId");

                    b.Navigation("ParentConjunction");
                });

            modelBuilder.Entity("FieldQuery", b =>
                {
                    b.HasOne("Domain.Models.FieldSets.Field", null)
                        .WithMany()
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Queries.Query", null)
                        .WithMany()
                        .HasForeignKey("QueriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.DataCore.Operator", b =>
                {
                    b.Navigation("OperatorFieldTypes");

                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("Domain.Models.FieldSets.FieldSet", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Queries");
                });

            modelBuilder.Entity("Domain.Models.Queries.Conjunction", b =>
                {
                    b.Navigation("Statements");
                });

            modelBuilder.Entity("Domain.Models.Queries.Operation", b =>
                {
                    b.Navigation("OperationParameters");
                });

            modelBuilder.Entity("Domain.Models.Queries.Statement", b =>
                {
                    b.Navigation("conjunctions");

                    b.Navigation("operations");
                });
#pragma warning restore 612, 618
        }
    }
}
